{
  "TSTMP": "datetime('now','localtime')",
  "CUSER": "(select context from jsharmony_meta limit 1)",
  "SMS_SendTXTSMS": "select txt_tval,txt_val,txt_bcc from jsharmony_txt where txt_process='SMS' and txt_attrib=@txt_attrib",
  "CONCAT":"||",
  "FUN_PREFIX":"",
  "PROC_RUN":"",
  "PAR_LIST_BEG":"(",
  "PAR_LIST_END":")",
  "X_SMLW_TOP":"select case when @cur_sm_id_auto <> 0 then @cur_sm_id_auto else (select sm_id_auto from jsharmony.sm where 1=1 order by sm_utype desc,coalesce(SM.sm_seq,SM.sm_id),sm_name,SM.sm_id limit 1) end sm_id_auto from jsharmony.dual",
  "X_SMLW_INSERT":["update jsharmony.sm set sm_seq=coalesce(sm_seq,sm_id)+1",
                  "  where coalesce(sm_seq,sm_id) > (select coalesce(sm_seq,sm_id) from jsharmony.sm where sm_id=@sm_id_parent) ",
                  "    and sm_utype = (select sm_utype from jsharmony.sm where sm_id=@sm_id_parent)",
                  "    and (coalesce(sm_seq,sm_id)-(select coalesce(sm_seq,sm_id) from jsharmony.sm where sm_id=@sm_id_parent))/(select count(*) from jsharmony.sm sm2 where coalesce(sm2.sm_seq,sm2.sm_id) > (select coalesce(sm_seq,sm_id) from jsharmony.sm where sm_id=@sm_id_parent) and coalesce(sm2.sm_seq,sm2.sm_id) <= coalesce(sm.sm_seq,sm.sm_id))<=1.0;",
                  "insert into jsharmony.SM (sm_id,sm_id_parent,sm_utype,sm_seq,sm_name,sm_desc,sm_sts)",
                  "  select (select max(sm_id)+1 from jsharmony.SM),sm_id,sm_utype,coalesce(sm_seq,sm_id)+1,@sm_name,@sm_desc,'ACTIVE' from jsharmony.SM where sm_id=@sm_id_parent;",
                  "select sm_id_auto from jsharmony_sm where rowid=last_insert_rowid();"],
  "X_SMLW_LOV":"select sm_id as codeid,sm_id_parent as codeparentid,sm_id_auto as codeval,sm_desc as codetxt,'folder' as codeicon from jsharmony.sm where 1=1 %%%DATALOCKS%%% order by sm_utype desc,coalesce(SM.sm_seq,SM.sm_id),sm_name,SM.sm_id",
  "SM_UTYPE_LOV":"select 'S' as codeval,'Main' as codetxt union all select 'C','Client'",
  "JSHARMONY_FACTORY_INSTALLED":"select case when ifnull((SELECT count(*)FROM sqlite_master WHERE name='jsharmony_dual' and type='table'),0) > 0 then 1 else 0 end jsharmony_factory_installed",
  "JSEXEC_STR": {
    "params": [],
    "exec": [
      "var rslt = arguments[0];",
      "return rslt.replace(/'/g,\"''\").replace(/\\;/g,\"\\\\\\\\;\").replace(/\\r/g,\" \").replace(/\\n/g,\"\\\\n \");"
    ]
  },
  "jsharmony.create_gcod" : {
    "params": ["SCHEMA","ID","COMMENT"],
    "sql": ["create_gcod(ifnull(%%%SCHEMA%%%||'_','')||'gcod_'||%%%ID%%%)"]
  },
  "create_gcod" : {
    "params": ["TABLE_NAME"],
    "sql": [
      "update jsharmony_meta set jsexec = '{ \"function\": \"exec\", \"sql\": \"",
      "  create table '||%%%TABLE_NAME%%%||' (",
      "    gcod_id integer primary key autoincrement not null,",
      "    codseq integer,",
      "    codeval text unique not null,",
      "    codetxt text,",
      "    codecode text,",
      "    codetdt text,",
      "    codetcm text,",
      "    cod_etstmp text,",
      "    cod_eu text,",
      "    cod_mtstmp text,",
      "    cod_mu text,",
      "    cod_snotes text,",
      "    cod_notes text,",
      "    codeattrib text",
      "  )\\;",
      "  create trigger '||%%%TABLE_NAME%%%||'_after_insert after insert on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    update '||%%%TABLE_NAME%%%||' set ",
      "      cod_eu = (select context from jsharmony_meta limit 1),cod_etstmp=datetime(''now'',''localtime''),",
      "      cod_mu = (select context from jsharmony_meta limit 1),cod_mtstmp=datetime(''now'',''localtime'')",
      "      where rowid = new.rowid\\\\\\;",
      "    %%%JSEXEC_ESCAPE(%%%AUDIT_I(\"'||%%%TABLE_NAME%%%||'\",\"new.gcod_id\",\"gcod_id\",\"null\",\"null\",\"null\")%%%)%%%",
      "    update jsharmony_meta set aud_seq = null\\\\\\;",
      "  end\\;",
      " create trigger '||%%%TABLE_NAME%%%||'_before_update before update on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    select case when %%%NONEQUAL(\"NEW.gcod_id\",\"OLD.gcod_id\")%%% then raise(FAIL,''Application Error - ID cannot be updated.'') end\\\\\\;",
      "    select case when %%%NONEQUAL(\"NEW.codeval\",\"OLD.codeval\")%%% then raise(FAIL,''Application Error - Code Value 1 cannot be updated..'') end\\\\\\;",
      "  end\\;",
      " create trigger '||%%%TABLE_NAME%%%||'_after_update after update on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    %%%JSEXEC_ESCAPE(%%%AUDIT_U_MULT(\"'||%%%TABLE_NAME%%%||'\",\"new.gcod_id\",[\"gcod_id\",\"codseq\",\"codeval\",\"codetxt\",\"codecode\",\"codetdt\",\"codetcm\",\"cod_notes\"],\"null\",\"null\",\"null\")%%%)%%%",
      "    update '||%%%TABLE_NAME%%%||' set ",
      "      cod_mu = (select context from jsharmony_meta limit 1),cod_mtstmp=datetime(''now'',''localtime'') ",
      "      where rowid = new.rowid and exists(select * from jsharmony_meta where aud_seq is not null)\\\\\\;",
      "    update jsharmony_meta set aud_seq = null\\\\\\;",
      "  end\\;",
      " create trigger '||%%%TABLE_NAME%%%||'_delete before delete on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    %%%JSEXEC_ESCAPE(%%%AUDIT_D_MULT(\"'||%%%TABLE_NAME%%%||'\",\"old.gcod_id\",[\"gcod_id\",\"codseq\",\"codeval\",\"codetxt\",\"codecode\",\"codetdt\",\"codetcm\",\"cod_notes\"],\"null\",\"null\",\"null\")%%%)%%%",
      "    update jsharmony_meta set aud_seq = null\\\\\\;",
      "  end\\;",
      "\" }';"
    ]
  },
  "jsharmony.create_gcod2" : {
    "params": ["SCHEMA","ID","COMMENT"],
    "sql": ["create_gcod2(ifnull(%%%SCHEMA%%%||'_','')||'gcod2_'||%%%ID%%%)"]
  },
  "create_gcod2" : {
    "params": ["TABLE_NAME"],
    "sql": [
      "update jsharmony_meta set jsexec = '{ \"function\": \"exec\", \"sql\": \"",
      "  create table '||%%%TABLE_NAME%%%||' (",
      "    gcod2_id integer primary key autoincrement not null,",
      "    codseq integer,",
      "    codeval1 text not null,",
      "    codeval2 text not null,",
      "    codetxt text,",
      "    codecode text,",
      "    codetdt text,",
      "    codetcm text,",
      "    cod_etstmp text,",
      "    cod_eu text,",
      "    cod_mtstmp text,",
      "    cod_mu text,",
      "    cod_snotes text,",
      "    cod_notes text,",
      "    codeattrib text,",
      "    unique(codeval1,codeval2)",
      "  )\\;",
      "  create trigger '||%%%TABLE_NAME%%%||'_after_insert after insert on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    update '||%%%TABLE_NAME%%%||' set ",
      "      cod_eu = (select context from jsharmony_meta limit 1),cod_etstmp=datetime(''now'',''localtime''),",
      "      cod_mu = (select context from jsharmony_meta limit 1),cod_mtstmp=datetime(''now'',''localtime'')",
      "      where rowid = new.rowid\\\\\\;",
      "    %%%JSEXEC_ESCAPE(%%%AUDIT_I(\"'||%%%TABLE_NAME%%%||'\",\"new.gcod2_id\",\"gcod2_id\",\"null\",\"null\",\"null\")%%%)%%%",
      "    update jsharmony_meta set aud_seq = null\\\\\\;",
      "  end\\;",
      " create trigger '||%%%TABLE_NAME%%%||'_before_update before update on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    select case when %%%NONEQUAL(\"NEW.gcod2_id\",\"OLD.gcod2_id\")%%% then raise(FAIL,''Application Error - ID cannot be updated.'') end\\\\\\;",
      "    select case when %%%NONEQUAL(\"NEW.codeval1\",\"OLD.codeval1\")%%% then raise(FAIL,''Application Error - Code Value 1 cannot be updated..'') end\\\\\\;",
      "    select case when %%%NONEQUAL(\"NEW.codeval2\",\"OLD.codeval2\")%%% then raise(FAIL,''Application Error - Code Value 2 cannot be updated..'') end\\\\\\;",
      "  end\\;",
      " create trigger '||%%%TABLE_NAME%%%||'_after_update after update on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    %%%JSEXEC_ESCAPE(%%%AUDIT_U_MULT(\"'||%%%TABLE_NAME%%%||'\",\"new.gcod2_id\",[\"gcod2_id\",\"codseq\",\"codeval1\",\"codeval2\",\"codetxt\",\"codecode\",\"codetdt\",\"codetcm\",\"cod_notes\"],\"null\",\"null\",\"null\")%%%)%%%",
      "    update '||%%%TABLE_NAME%%%||' set ",
      "      cod_mu = (select context from jsharmony_meta limit 1),cod_mtstmp=datetime(''now'',''localtime'') ",
      "      where rowid = new.rowid and exists(select * from jsharmony_meta where aud_seq is not null)\\\\\\;",
      "    update jsharmony_meta set aud_seq = null\\\\\\;",
      "  end\\;",
      " create trigger '||%%%TABLE_NAME%%%||'_delete before delete on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    %%%JSEXEC_ESCAPE(%%%AUDIT_D_MULT(\"'||%%%TABLE_NAME%%%||'\",\"old.gcod2_id\",[\"gcod2_id\",\"codseq\",\"codeval1\",\"codeval2\",\"codetxt\",\"codecode\",\"codetdt\",\"codetcm\",\"cod_notes\"],\"null\",\"null\",\"null\")%%%)%%%",
      "    update jsharmony_meta set aud_seq = null\\\\\\;",
      "  end\\;",
      "\" }';"
    ]
  },
  "jsharmony.create_ucod" : {
    "params": ["SCHEMA","ID","COMMENT"],
    "sql": ["create_ucod(ifnull(%%%SCHEMA%%%||'_','')||'ucod_'||%%%ID%%%)"]
  },
  "create_ucod" : {
    "params": ["TABLE_NAME"],
    "sql": [
      "update jsharmony_meta set jsexec = '{ \"function\": \"exec\", \"sql\": \"",
      "  create table '||%%%TABLE_NAME%%%||' (",
      "    ucod_id integer primary key autoincrement not null,",
      "    codseq integer,",
      "    codeval text unique not null,",
      "    codetxt text,",
      "    codecode text,",
      "    codetdt text,",
      "    codetcm text,",
      "    cod_etstmp text,",
      "    cod_eu text,",
      "    cod_mtstmp text,",
      "    cod_mu text,",
      "    cod_snotes text,",
      "    cod_notes text,",
      "    codeattrib text",
      "  )\\;",
      "  create trigger '||%%%TABLE_NAME%%%||'_after_insert after insert on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    update '||%%%TABLE_NAME%%%||' set ",
      "      cod_eu = (select context from jsharmony_meta limit 1),cod_etstmp=datetime(''now'',''localtime''),",
      "      cod_mu = (select context from jsharmony_meta limit 1),cod_mtstmp=datetime(''now'',''localtime'')",
      "      where rowid = new.rowid\\\\\\;",
      "    %%%JSEXEC_ESCAPE(%%%AUDIT_I(\"'||%%%TABLE_NAME%%%||'\",\"new.ucod_id\",\"ucod_id\",\"null\",\"null\",\"null\")%%%)%%%",
      "    update jsharmony_meta set aud_seq = null\\\\\\;",
      "  end\\;",
      " create trigger '||%%%TABLE_NAME%%%||'_before_update before update on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    select case when %%%NONEQUAL(\"NEW.ucod_id\",\"OLD.ucod_id\")%%% then raise(FAIL,''Application Error - ID cannot be updated.'') end\\\\\\;",
      "    select case when %%%NONEQUAL(\"NEW.codeval\",\"OLD.codeval\")%%% then raise(FAIL,''Application Error - Code Value 1 cannot be updated..'') end\\\\\\;",
      "  end\\;",
      " create trigger '||%%%TABLE_NAME%%%||'_after_update after update on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    %%%JSEXEC_ESCAPE(%%%AUDIT_U_MULT(\"'||%%%TABLE_NAME%%%||'\",\"new.ucod_id\",[\"ucod_id\",\"codseq\",\"codeval\",\"codetxt\",\"codecode\",\"codetdt\",\"codetcm\",\"cod_notes\"],\"null\",\"null\",\"null\")%%%)%%%",
      "    update '||%%%TABLE_NAME%%%||' set ",
      "      cod_mu = (select context from jsharmony_meta limit 1),cod_mtstmp=datetime(''now'',''localtime'') ",
      "      where rowid = new.rowid and exists(select * from jsharmony_meta where aud_seq is not null)\\\\\\;",
      "    update jsharmony_meta set aud_seq = null\\\\\\;",
      "  end\\;",
      " create trigger '||%%%TABLE_NAME%%%||'_delete before delete on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    %%%JSEXEC_ESCAPE(%%%AUDIT_D_MULT(\"'||%%%TABLE_NAME%%%||'\",\"old.ucod_id\",[\"ucod_id\",\"codseq\",\"codeval\",\"codetxt\",\"codecode\",\"codetdt\",\"codetcm\",\"cod_notes\"],\"null\",\"null\",\"null\")%%%)%%%",
      "    update jsharmony_meta set aud_seq = null\\\\\\;",
      "  end\\;",
      "\" }';"
    ]
  },
  "jsharmony.create_ucod2" : {
    "params": ["SCHEMA","ID","COMMENT"],
    "sql": ["create_ucod2(ifnull(%%%SCHEMA%%%||'_','')||'ucod2_'||%%%ID%%%)"]
  },
  "create_ucod2" : {
    "params": ["TABLE_NAME"],
    "sql": [
      "update jsharmony_meta set jsexec = '{ \"function\": \"exec\", \"sql\": \"",
      "  create table '||%%%TABLE_NAME%%%||' (",
      "    ucod2_id integer primary key autoincrement not null,",
      "    codseq integer,",
      "    codeval1 text not null,",
      "    codeval2 text not null,",
      "    codetxt text,",
      "    codecode text,",
      "    codetdt text,",
      "    codetcm text,",
      "    cod_etstmp text,",
      "    cod_eu text,",
      "    cod_mtstmp text,",
      "    cod_mu text,",
      "    cod_snotes text,",
      "    cod_notes text,",
      "    codeattrib text,",
      "    unique(codeval1,codeval2)",
      "  )\\;",
      "  create trigger '||%%%TABLE_NAME%%%||'_after_insert after insert on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    update '||%%%TABLE_NAME%%%||' set ",
      "      cod_eu = (select context from jsharmony_meta limit 1),cod_etstmp=datetime(''now'',''localtime''),",
      "      cod_mu = (select context from jsharmony_meta limit 1),cod_mtstmp=datetime(''now'',''localtime'')",
      "      where rowid = new.rowid\\\\\\;",
      "    %%%JSEXEC_ESCAPE(%%%AUDIT_I(\"'||%%%TABLE_NAME%%%||'\",\"new.ucod2_id\",\"ucod2_id\",\"null\",\"null\",\"null\")%%%)%%%",
      "    update jsharmony_meta set aud_seq = null\\\\\\;",
      "  end\\;",
      " create trigger '||%%%TABLE_NAME%%%||'_before_update before update on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    select case when %%%NONEQUAL(\"NEW.ucod2_id\",\"OLD.ucod2_id\")%%% then raise(FAIL,''Application Error - ID cannot be updated.'') end\\\\\\;",
      "    select case when %%%NONEQUAL(\"NEW.codeval1\",\"OLD.codeval1\")%%% then raise(FAIL,''Application Error - Code Value 1 cannot be updated..'') end\\\\\\;",
      "    select case when %%%NONEQUAL(\"NEW.codeval2\",\"OLD.codeval2\")%%% then raise(FAIL,''Application Error - Code Value 2 cannot be updated..'') end\\\\\\;",
      "  end\\;",
      " create trigger '||%%%TABLE_NAME%%%||'_after_update after update on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    %%%JSEXEC_ESCAPE(%%%AUDIT_U_MULT(\"'||%%%TABLE_NAME%%%||'\",\"new.ucod2_id\",[\"ucod2_id\",\"codseq\",\"codeval1\",\"codeval2\",\"codetxt\",\"codecode\",\"codetdt\",\"codetcm\",\"cod_notes\"],\"null\",\"null\",\"null\")%%%)%%%",
      "    update '||%%%TABLE_NAME%%%||' set ",
      "      cod_mu = (select context from jsharmony_meta limit 1),cod_mtstmp=datetime(''now'',''localtime'') ",
      "      where rowid = new.rowid and exists(select * from jsharmony_meta where aud_seq is not null)\\\\\\;",
      "    update jsharmony_meta set aud_seq = null\\\\\\;",
      "  end\\;",
      " create trigger '||%%%TABLE_NAME%%%||'_delete before delete on '||%%%TABLE_NAME%%%||'",
      "  begin",
      "    %%%JSEXEC_ESCAPE(%%%AUDIT_D_MULT(\"'||%%%TABLE_NAME%%%||'\",\"old.ucod2_id\",[\"ucod2_id\",\"codseq\",\"codeval1\",\"codeval2\",\"codetxt\",\"codecode\",\"codetdt\",\"codetcm\",\"cod_notes\"],\"null\",\"null\",\"null\")%%%)%%%",
      "    update jsharmony_meta set aud_seq = null\\\\\\;",
      "  end\\;",
      "\" }';"
    ]
  },
  "NONEQUAL" : {
    "params": ["A","B"],
    "sql": ["(%%%A%%% is null and %%%B%%% is not null or %%%B%%% is null and %%%A%%% is not null or %%%A%%%<>%%%B%%%)"]
  },
  "AUDIT_I_EXT" : {
    "params": ["TABLE","ID","COL_NAME","REF_NAME","REF_ID","SUBJ","C_ID","E_ID"],
    "sql": [
      "insert into jsharmony_aud_h(table_name,table_id,aud_op,aud_tstmp,ref_name,ref_id,subj,c_id,e_id,aud_u)",
      "  select '%%%TABLE%%%',%%%ID%%%,'I',datetime('now','localtime'),%%%REF_NAME%%%,%%%REF_ID%%%,%%%SUBJ%%%,%%%C_ID%%%,%%%E_ID%%%,(select context from jsharmony_meta limit 1)",
      "  where exists(select * from jsharmony_meta where aud_seq is null)\\\\\\;",
      "update jsharmony_meta set aud_seq = (select aud_seq from jsharmony_aud_h where rowid = last_insert_rowid())",
      "  where exists(select * from jsharmony_meta where aud_seq is null)\\\\\\;"
    ]
  },
  "AUDIT_I" : {
    "params": ["TABLE","ID","COL_NAME","REF_NAME","REF_ID","SUBJ","C_ID","E_ID"],
    "sql": [
      "insert into jsharmony_aud_h(table_name,table_id,aud_op,aud_tstmp,ref_name,ref_id,subj,c_id,e_id,aud_u)",
      "  select '%%%TABLE%%%',%%%ID%%%,'I',datetime('now','localtime'),%%%REF_NAME%%%,%%%REF_ID%%%,%%%SUBJ%%%,%%%C_ID%%%,%%%E_ID%%%,(select context from jsharmony_meta limit 1)",
      "  where exists(select * from jsharmony_meta where aud_seq is null)\\;",
      "update jsharmony_meta set aud_seq = (select aud_seq from jsharmony_aud_h where rowid = last_insert_rowid())",
      "  where exists(select * from jsharmony_meta where aud_seq is null)\\;"
    ]
  },
  "AUDIT_U_MULT" : {
    "params": ["TABLE","ID","COL_ARRAY","REF_NAME","REF_ID","SUBJ","C_ID","E_ID"],
    "exec": [
      "var rslt = '';",
      "for(var i=0;i<COL_ARRAY.length;i++){",
      "  rslt += '%%%AUDIT_U('+JSON.stringify(TABLE)+','+JSON.stringify(ID)+','+JSON.stringify(COL_ARRAY[i])+','+JSON.stringify(REF_NAME)+','+JSON.stringify(REF_ID)+','+JSON.stringify(SUBJ)+','+JSON.stringify(C_ID)+','+JSON.stringify(E_ID)+')%%%\\r\\n';",
      "}",
      "return rslt;"
    ]
  },
  "AUDIT_U" : {
    "params": ["TABLE","ID","COL_NAME","REF_NAME","REF_ID","SUBJ","C_ID","E_ID"],
    "sql": [
      "insert into jsharmony_aud_h(table_name,table_id,aud_op,aud_tstmp,ref_name,ref_id,subj,c_id,e_id,aud_u)",
      "  select '%%%TABLE%%%',%%%ID%%%,'U',datetime('now','localtime'),%%%REF_NAME%%%,%%%REF_ID%%%,%%%SUBJ%%%,%%%C_ID%%%,%%%E_ID%%%,(select context from jsharmony_meta limit 1)",
      "  where exists(select * from jsharmony_meta where aud_seq is null) and (%%%NONEQUAL(\"OLD.%%%COL_NAME%%%\", \"NEW.%%%COL_NAME%%%\")%%%)\\;",
      "update jsharmony_meta set aud_seq = (select aud_seq from jsharmony_aud_h where rowid = last_insert_rowid())",
      "  where exists(select * from jsharmony_meta where aud_seq is null) and (%%%NONEQUAL(\"OLD.%%%COL_NAME%%%\", \"NEW.%%%COL_NAME%%%\")%%%)\\;",
      "insert into jsharmony_aud_d(aud_seq,column_name,column_val)",
      "  select (select aud_seq from jsharmony_meta),upper('%%%COL_NAME%%%'),OLD.%%%COL_NAME%%%",
      "  where (%%%NONEQUAL(\"OLD.%%%COL_NAME%%%\", \"NEW.%%%COL_NAME%%%\")%%%)\\;",
      ""
    ]
  },
  "AUDIT_U_CUSTOM" : {
    "params": ["TABLE","ID","CONDITION","REF_NAME","REF_ID","SUBJ","C_ID","E_ID"],
    "sql": [
      "insert into jsharmony_aud_h(table_name,table_id,aud_op,aud_tstmp,ref_name,ref_id,subj,c_id,e_id,aud_u)",
      "  select '%%%TABLE%%%',%%%ID%%%,'U',datetime('now','localtime'),%%%REF_NAME%%%,%%%REF_ID%%%,%%%SUBJ%%%,%%%C_ID%%%,%%%E_ID%%%,(select context from jsharmony_meta limit 1)",
      "  where exists(select * from jsharmony_meta where aud_seq is null) and (%%%CONDITION%%%)\\;",
      "update jsharmony_meta set aud_seq = (select aud_seq from jsharmony_aud_h where rowid = last_insert_rowid())",
      "  where exists(select * from jsharmony_meta where aud_seq is null) and (%%%CONDITION%%%)\\;",
      ""
    ]
  },
  "AUDIT_D_MULT" : {
    "params": ["TABLE","ID","COL_ARRAY","REF_NAME","REF_ID","SUBJ","C_ID","E_ID"],
    "exec": [
      "var rslt = '';",
      "for(var i=0;i<COL_ARRAY.length;i++){",
      "  rslt += '%%%AUDIT_D('+JSON.stringify(TABLE)+','+JSON.stringify(ID)+','+JSON.stringify(COL_ARRAY[i])+','+JSON.stringify(REF_NAME)+','+JSON.stringify(REF_ID)+','+JSON.stringify(SUBJ)+','+JSON.stringify(C_ID)+','+JSON.stringify(E_ID)+')%%%\\r\\n';",
      "}",
      "return rslt;"
    ]
  },
  "AUDIT_D" : {
    "params": ["TABLE","ID","COL_NAME","REF_NAME","REF_ID","SUBJ","C_ID","E_ID"],
    "sql": [
      "insert into jsharmony_aud_h(table_name,table_id,aud_op,aud_tstmp,ref_name,ref_id,subj,c_id,e_id,aud_u)",
      "  select ",
      "    '%%%TABLE%%%',%%%ID%%%,'D',datetime('now','localtime'),",
      "    (select ref_name from jsharmony_aud_h where table_name='%%%TABLE%%%' and table_id=%%%ID%%% and aud_op='I' order by aud_seq desc),",
      "    (select ref_id from jsharmony_aud_h where table_name='%%%TABLE%%%' and table_id=%%%ID%%% and aud_op='I' order by aud_seq desc),",
      "    (select subj from jsharmony_aud_h where table_name='%%%TABLE%%%' and table_id=%%%ID%%% and aud_op='I' order by aud_seq desc),",
      "    (select c_id from jsharmony_aud_h where table_name='%%%TABLE%%%' and table_id=%%%ID%%% and aud_op='I' order by aud_seq desc),",
      "    (select e_id from jsharmony_aud_h where table_name='%%%TABLE%%%' and table_id=%%%ID%%% and aud_op='I' order by aud_seq desc),",
      "    (select context from jsharmony_meta limit 1)",
      "  where exists(select * from jsharmony_meta where aud_seq is null)\\;",
      "update jsharmony_meta set aud_seq = (select aud_seq from jsharmony_aud_h where rowid = last_insert_rowid())",
      "  where exists(select * from jsharmony_meta where aud_seq is null)\\;",

      "insert into jsharmony_aud_d(aud_seq,column_name,column_val)",
      "  select (select aud_seq from jsharmony_meta),upper('%%%COL_NAME%%%'),OLD.%%%COL_NAME%%%\\;",
      ""
    ]
  },
  "CLIENT_SCOPE": "('C','E')",
  "jsharmony.getcid":{
    "params": ["tabn","tabid"],
    "sql": [
      "(select null)"
    ]
  },
  "jsharmony.geteid":{
    "params": ["tabn","tabid"],
    "sql": [
      "(select null)"
    ]
  },
  "jsharmony.mycuser_c_id":{
    "params": [],
    "sql": [
      "(select jsharmony_cpe.c_id from jsharmony_cpe where jsharmony_cpe.pe_id=jsharmony.mycpe())"
    ]
  },
  "jsharmony.dscope_dctgr":"jsharmony_gcod2_d_scope_d_ctgr",
  "jsharmony.mycuser":{
    "params": [],
    "sql": [
      "(select context from jsharmony_meta)"
    ]
  },
  "jsharmony.mycuser_fmt":{
    "params": ["u"],
    "sql": [
      "(case substr(%%%u%%%,1,1)",
      "  when 'S' then (select mycuser_fmt_sname from (select pe_id mycuser_fmt_spe_id,'S-'||pe_lname||', '||pe_fname as mycuser_fmt_sname from jsharmony.pe) mycuser_fmt_stbl where mycuser_fmt_spe_id=substr(%%%u%%%,2,1024))",
      "  when 'C' then (select mycuser_fmt_cname from (select pe_id mycuser_fmt_cpe_id,'C-'||pe_lname||', '||pe_fname as mycuser_fmt_cname from jsharmony.cpe) mycuser_fmt_ctbl where mycuser_fmt_cpe_id=substr(%%%u%%%,2,1024))",
      "  when 'U' then substr(%%%u%%%,2,2014)",
      "  else 'unknown'",
      "end)"
    ]
  },
  "jsharmony.mycpe":{
    "params": [],
    "sql": [
      "(select (case substr(context,1,1)",
      "  when 'C' then cast(substr(context,2,1024) as int)",
      "  else null",
      "end) from jsharmony_meta)"
    ]
  },
  "jsharmony.get_pe_name":{
    "params": ["id"],
    "sql": [
      "(select get_pe_name_jsharmony_pe_name from (select pe_lname||', '||pe_fname get_pe_name_jsharmony_pe_name,pe_id get_pe_name_jsharmony_pe_id from jsharmony_pe) get_pe_name_jsharmony_pe where get_pe_name_jsharmony_pe_id = %%%id%%%)"
    ]
  },
  "jsharmony.get_ppd_desc":{
    "params": ["in_ppd_process","in_ppd_attrib"],
    "sql": [
      "(select get_ppd_desc_jsharmony_ppd_desc from (select ppd_desc get_ppd_desc_jsharmony_ppd_desc, ppd_process get_ppd_desc_jsharmony_ppd_process, ppd_attrib get_ppd_desc_jsharmony_ppd_attrib from jsharmony_ppd) get_ppd_desc_jsharmony_ppd where get_ppd_desc_jsharmony_ppd_process = %%%in_ppd_process%%% and get_ppd_desc_jsharmony_ppd_attrib = %%%in_ppd_attrib%%%)"
    ]
  },
  "jsharmony.get_cpe_name":{
    "params": ["id"],
    "sql": [
      "(select get_cpe_name_jsharmony_cpe_name from (select pe_id get_cpe_name_jsharmony_cpe_id, pe_lname||', '||pe_fname get_cpe_name_jsharmony_cpe_name from jsharmony_cpe) get_cpe_name_jsharmony_cpe where get_cpe_name_jsharmony_cpe_id = %%%id%%%)"
    ]
  },
  "jsharmony.table_type":{
    "params": ["schema","table_name"],
    "sql": [
      "(select (SELECT case type when 'table' then 'BASE TABLE' else null end FROM sqlite_master where lower(name)=ifnull(%%%schema%%%||'_','')||lower(%%%table_name%%%)))"
    ]
  },
  "jsharmony.audit_info":{
    "params": ["etstmp","eu","mtstmp","mu"],
    "sql": [
      "(select 'INFO'||char(13,10)||",
      "        '     Entered:  '||%%%etstmp%%%||'  '||jsharmony.mycuser_fmt(%%%eu%%%)||char(13,10)||",
      "        'Last Updated:  '||%%%mtstmp%%%||'  '||jsharmony.mycuser_fmt(%%%mu%%%)",
      ")"
    ]
  },
  "jsharmony.mype":{
    "params": [],
    "sql": [
      "(case substr(jsharmony.mycuser(),1,1)",
      "  when 'S' then cast(substr(jsharmony.mycuser(),2,1024) as int)",
      "  else  null",
      "end)"
    ]
  },
  "jsharmony.mypec":{
    "params": [],
    "sql": [
      "(case substr(jsharmony.mycuser(),1,1)",
      "  when 'C' then cast(substr(jsharmony.mycuser(),2,1024) as int)",
      "  else  null",
      "end)"
    ]
  },
  "jsharmony.mynow":{
    "params": [],
    "sql": "datetime('now','localtime')"
  },
  "jsharmony.mytodate":{
    "params": ["dt"],
    "sql": "date(%%%dt%%%)"
  },
  "jsharmony.d_filename":{
    "params": ["d_id","d_ext"],
    "sql": [
      "(cast(%%%d_id%%% as text)||%%%d_ext%%%)"
    ]
  },
  "concat":{
    "params": ["a","b"],
    "sql": [
      "(%%%a%%%||%%%b%%%)"
    ]
  }
}